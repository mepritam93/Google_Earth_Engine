
/////////////////  Define Region of Interest Boundary  /////////////////

var roi = ee.Geometry.Polygon([[75.5,23.0], [80.5,23], [80.5,20.5], [75.5,20.5]]);

Map.addLayer (roi, {}, 'roi', false);
Map.centerObject (roi);

var text = require('users/gena/packages:text');

// Function to calculate indices
function calculateIndices(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI'); // NIR, Red
  return image.addBands([ndvi]);
}

// function calculateIndices(image) {
//   var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI'); // NIR, Red
//   var evi = image.expression(
//     '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
//       'NIR': image.select('B8'),
//       'RED': image.select('B4'),
//       'BLUE': image.select('B2')
//     }).rename('EVI');
//   var ndwi = image.normalizedDifference(['B3', 'B8']).rename('NDWI'); // Green, NIR
//   var mndwi = image.normalizedDifference(['B3', 'B11']).rename('MNDWI'); // Green, SWIR1
//   var psri = image.expression(
//     '(RED - BLUE) / REDEDGE', {
//       'RED': image.select('B4'),
//       'BLUE': image.select('B2'),
//       'REDEDGE': image.select('B5')
//     }).rename('PSRI');
//   var ndbi = image.normalizedDifference(['B11', 'B8']).rename('NDBI'); // SWIR1, NIR

//   return image.addBands([ndvi, evi, ndwi, mndwi, psri, ndbi]);
// }

// Filter Sentinel-2 collection
var sentinelCollection = ee.ImageCollection("COPERNICUS/S2_HARMONIZED")
  .filterBounds(roi)
  .filterDate('2017-01-01', '2024-12-31')
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 100))
  .map(calculateIndices);

// Group images into monthly composites
function createMonthlyComposite(year, month) {
  var startDate = ee.Date.fromYMD(year, month, 1);
  var endDate = startDate.advance(1, 'month');

  return sentinelCollection
    .filterDate(startDate, endDate)
    .mean()
    .select('NDVI')
    .set('month', month)
    .set('year', year)
    .clip(roi);
}

// Create monthly composites for each year and month
var years = ee.List.sequence(2017, 2023);
var months = ee.List.sequence(1, 12);

var monthlyComposites = ee.ImageCollection(
  years.map(function(year) {
    return months.map(function(month) {
      return createMonthlyComposite(year, month);
    });
  }).flatten()
);

// Define visualization parameters for NDVI
var visParams = {
  bands: ['NDVI'],
  min: -1,
  max: 1,
  palette: [
    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
    '012E01', '011D01', '011301']
};

// Get text location using the roi geometry
var pt = text.getLocation(roi, 'left', '5%', '15%');

// Create RGB visualization image for use as animation frames.
var rgbVis = monthlyComposites.map(function(image) {
  var scale = 1500;
  var textVis = { fontSize: 24, textColor: 'ffffff', outlineColor: '000000', outlineWidth: 3, outlineOpacity: 0.6 };

  // Get month and year from image properties
  var year = ee.Number(image.get('year')).format('%d');
  var month = ee.Number(image.get('month')).format('%02d');
  var label = text.draw(month.cat('-').cat(year), pt, scale, textVis);

  return image.visualize(visParams).clip(roi).blend(label);
});

// Create an animated GIF
// Define GIF visualization parameters.
var gifParams = {
  'region': roi.transform('EPSG:4326', null),
  'dimensions': '512', // Adjust dimensions to meet pixel limits
  'framesPerSecond': 3,
  'format': 'gif'
};

// Print the GIF URL to the console.
print(rgbVis.getVideoThumbURL(gifParams));

// Render the GIF animation in the console.
print(ui.Thumbnail(rgbVis, gifParams));
