/**
 * @name Monthly Mean NDVI Trend Analysis with Plot
 * @description This script calculates and visualizes the trend of monthly mean NDVI over time using linear regression, and generates a plot of the monthly NDVI series.
 */

///////////////////// Defining Study Area /////////////////////

//For State Boundary
// var gaul = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level2")
// var main = gaul.filter(ee.Filter.eq('ADM1_NAME', 'Goa'))

//For Basin Baoundary
var dataset = ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_12")
//Map.addLayer (dataset)

var mainID = 4120031730 // Mahi Basin
// var mainID = 4120031610 //ID for Narmada Basin
// var mainID = 4120025450 //for Ganga
// var mainID = 4120027100 // Mahanadi
// var mainID = 4120027940 //Krishna Basin

var main = dataset.filter(ee.Filter.eq('MAIN_BAS', mainID))
var roi = main;


// Define the date range for the analysis.
var startDate = '2018-01-01';
var endDate = '2023-12-31';

// Load the Landsat 8 surface reflectance collection.
var landsat8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterDate(startDate, endDate)
  .filterBounds(roi);

// Function to calculate NDVI and cloud mask.
var calculateNDVI = function(image) {
  var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;
  var qa = image.select('QA_PIXEL');
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
    .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.addBands(ndvi).updateMask(mask);
};

// Apply NDVI calculation and cloud masking.
var ndviCollection = landsat8.map(calculateNDVI);

// Create monthly mean NDVI time series.
var monthlyNDVI = ee.List.sequence(ee.Date(startDate).millis(), ee.Date(endDate).millis(), 2592000000) // 30 days in milliseconds
  .map(function(time) {
    var monthStart = ee.Date(time);
    var monthEnd = monthStart.advance(1, 'month');
    var monthlyMean = ndviCollection
      .filterDate(monthStart, monthEnd)
      .select('NDVI')
      .mean()
      .set('system:time_start', monthStart.millis());
    return monthlyMean;
  });

// Convert the list to an ImageCollection.
var monthlyNDVICollection = ee.ImageCollection(monthlyNDVI);

// Add a time band (in years since the start date).
var ndviTimeSeries = monthlyNDVICollection.map(function(image) {
  var time = ee.Image.constant(image.date().difference(ee.Date(startDate), 'year')).float().rename('time');
  return image.addBands(time);
});

// Perform linear regression.
var trend = ndviTimeSeries.select(['time', 'NDVI']).reduce(ee.Reducer.linearFit());

// Extract the slope (trend) and intercept.
var slope = trend.select('scale').clip(roi);
var intercept = trend.select('offset').clip(roi);

// Visualize the results.
Map.centerObject(roi, 10);

var slopePalette = 'FF0000,FFFF00,008000'; // Red to Yellow to Green
Map.addLayer(slope, {min: -0.05, max: 0.05, palette: slopePalette}, 'NDVI Trend (Slope)');

var interceptPalette = 'FF0000,FFFFFF,0000FF'; // Red to White to Blue.
Map.addLayer(intercept, {min: -1, max: 1, palette: interceptPalette}, 'NDVI Intercept', 0);

// Create a plot of the monthly NDVI time series.
var chart = ui.Chart.image.series({
  imageCollection: monthlyNDVICollection.select('NDVI'),
  region: roi,
  reducer: ee.Reducer.mean(),
  scale: 100,
  xProperty: 'system:time_start'
})
.setOptions({
  title: 'Monthly Mean NDVI Time Series',
  hAxis: {title: 'Date'},
  vAxis: {title: 'NDVI'},
  series: {0: {color: 'blue'}},
  maxPixels: 1e9 // Increase to 1 billion pixels (adjust as needed)
});

// Display the chart.
print(chart);

// Export the trend (slope) as a GeoTIFF.
Export.image.toDrive({
  image: slope,
  description: 'monthly_ndvi_trend',
  scale: 30, // Resolution in meters
  region: roi,
  maxPixels: 1e13
});
